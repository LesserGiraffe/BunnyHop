/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.*
import java.nio.file.*

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
}

repositories {
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencies {
  implementation "com.jcraft:jsch:0.1.55"
  implementation "com.jcraft:jzlib:1.1.3"
  implementation "org.mozilla:rhino:1.7.15"
  implementation "org.apache.commons:commons-lang3:3.15.0"
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:1.12.1"
  implementation "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-bullet-platform:1.12.1:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:1.12.1:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx:1.12.1"
  implementation "com.badlogicgames.gdx:gdx-bullet:1.12.1"
  implementation "com.badlogicgames.gdx:gdx-freetype:1.12.1"
  implementation "com.kotcrab.vis:vis-ui:1.5.3"
  implementation "com.github.mgsx-dev.gdx-gltf:gltf:2.2.1"
  implementation 'com.google.code.gson:gson:2.11.0'
  implementation 'commons-cli:commons-cli:1.9.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

ext.jarName = 'bunnyhop.jar'
ext.USR_HOME = System.getProperty('user.home')
ext.JDK_VER = 21
ext.appDirName = 'App';
ext.ps = File.pathSeparator
ext.fs = File.separator
ext.projName = 'BunnyHop'
ext.jarLibName = 'Jlib'

ext.bhRuntimeJarName = 'bhruntimelib.jar'
ext.bhSimulatorJarName = 'bhsimulator.jar'
ext.bhUtilityJarName = 'bhutility.jar'
ext.bhRuntimeMainClass = 'net.seapanda.bunnyhop.runtime.AppMain'
ext.bhProgramName = 'BhAppScript.js'

application {
  // Define the main class for the application.
  mainClass = 'net.seapanda.bunnyhop.launch.AppMain'
}

// ライブラリの準備
task prepareLibs(type: Copy) {
  from configurations.runtimeClasspath
  into "$projectDir/../$appDirName/$jarLibName"

  doFirst {
    delete "$projectDir/../$appDirName/$jarLibName"
  }

  doLast {
    ant.copy(todir: "$projectDir/../$appDirName/$jarLibName") {
      fileset(
        dir: "$projectDir/../lib",
        includes: "$bhSimulatorJarName,$bhRuntimeJarName,$bhUtilityJarName")
    }
  }
}

sourceSets {
  main {
    java {
      srcDir "$projectDir/../src/main/java"
    }
  }
}

compileJava {
  classpath += fileTree("$projectDir/../$appDirName/$jarLibName") { include "*.jar" }
  options.incremental = true
  options.fork = true
  options.failOnError = true
  options.forkOptions.executable = USR_HOME + '/java/' + JDK_VER + '/jdk/bin/javac.exe'
}


task createJar(type: Exec) {
  dependsOn 'compileJava'

  doFirst {
    commandLine (
      (USR_HOME + '/java/' + JDK_VER +'/jdk/bin/jar'),
      '--create',
      '--file', "$projectDir/../$appDirName/$jarLibName/${jarName}",
      '--main-class', application.mainClass.get(),
      '-C', "$projectDir/build/classes/java/main", '.')
  }
}


task runApp(type: Exec) {
  dependsOn 'createJar'

  doFirst {
    commandLine (
	    (USR_HOME + '/java/' + JDK_VER +'/jdk/bin/java'),
      '-cp', ("$projectDir/../$appDirName/$jarLibName/*"),
      application.mainClass.get())
  }
}

task jlink(type: Exec) {
  // dependsOn 'createJar'

  doFirst {
    // カスタムJRE作成
    delete "$projectDir/../$projName"
    commandLine (
      (USR_HOME + '/java/' + JDK_VER + '/jdk/bin/jlink'),
      '--add-modules', 'ALL-MODULE-PATH',
      //'--compress=2',
      '--output', "$projectDir/../$projName")
  }

  doLast {
    ant.mkdir(dir:"$projectDir/../$projName/$appDirName")
    ant.copy(todir: "$projectDir/../$projName/$appDirName") {
      fileset(dir: "$projectDir/../$appDirName")
    }
    delete fileTree("$projectDir/../$projName/$appDirName/Log"){}
    delete fileTree("$projectDir/../$projName/$appDirName/BhExecEnvLog"){}
    delete fileTree("$projectDir/../$projName/$appDirName/Compiled"){}
  }
}

task runSelfContained(type: Exec) {
  doFirst {
    commandLine (
    "$projectDir/../$projName/bin/java",
      ('-splash:' + "$projectDir/../$projName/$appDirName/BhView/images/slpash.png"),
      '-cp', "$projectDir/../$projName/$appDirName/$jarLibName/*",
       application.mainClass.get())
  }
}

task runBhProgram(type: Exec) {

  doFirst {
    standardInput = System.in;
    commandLine (
      "$projectDir/../$projName/bin/java",
      '-cp', ("$projectDir/../$appDirName/$jarLibName/*"),
      bhRuntimeMainClass,
      '-run', "$bhProgramName")
  }
}
