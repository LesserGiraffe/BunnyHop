/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
	// Apply the java plugin to add support for Java
	id 'java'

	// Apply the application plugin to add support for building an application
	id 'application'

	id "de.undercouch.download" version "3.4.3"
}

repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

dependencies {}

ext.moduleName = 'net.seapanda.bunnyhop'
ext.mainClass = 'net.seapanda.bunnyhop.root.AppMain'
ext.bhProgramExecModName = 'net.seapanda.bhprogramexecenv'
ext.SYS_HOME = System.getenv('HOME')
ext.JDK_VER = 11
ext.appDirName = 'App';
ext.ps = File.pathSeparator
ext.projName = 'BunnyHop'

// JFXライブライの展開と配置
task prepareJFX {

	def jfxJarZipPath = "$projectDir/lib/jfx.zip"
	def jfxModZipPath = "$projectDir/mlib/jfx.zip"
	
	doFirst {
	
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			ext.jfxLibs = [
				'http://gluonhq.com/download/javafx-11-0-2-sdk-windows/': jfxJarZipPath,
				'https://gluonhq.com/download/javafx-11-0-2-jmods-windows/': jfxModZipPath
			]
		}
		else if (Os.isFamily(Os.FAMILY_UNIX)) {
			ext.jfxLibs = [
				'http://gluonhq.com/download/javafx-11-0-2-sdk-linux/': jfxJarZipPath,
				'https://gluonhq.com/download/javafx-11-0-2-jmods-linux/': jfxModZipPath
			]
		}
		else if (Os.isFamily(Os.FAMILY_MAC)) {
			ext.jfxLibs = [
				'http://gluonhq.com/download/javafx-11-0-2-sdk-mac': jfxJarZipPath,
				'https://gluonhq.com/download/javafx-11-0-2-jmods-mac/': jfxModZipPath
			]
		}
		
		for (lib in jfxLibs) {
			if (!file(lib.value).exists()) {
				download {
					src lib.key
					dest file(lib.value)
				}
			}
		}

		//解凍
		copy {
			from zipTree(jfxJarZipPath)
			into file("$projectDir/lib")
		}

		copy {
			from zipTree(jfxModZipPath)
			into file("$projectDir/mlib")
		}
		
		// 必要なファイルの配置
		FileTree ftree = fileTree("$projectDir/lib")
		ftree.visit {element ->
			if (element.file.toString() ==~ /.+javafx.+[\/\\]lib[\/\\].+\.jar$/ || 
				element.file.toString() ==~ /.+javafx.+[\/\\]lib[\/\\].+\.so$/) {
				ant.move(todir: "$projectDir/lib") {
					fileset(file: element.file.toString())
				}
			}
			else if (element.file.toString() ==~ /.+javafx.+[\/\\]bin$/) {
				ant.move(todir: "$projectDir/bin") {
					fileset(dir: element.file.toString())
				}
			}
		}
		
		ftree = fileTree("$projectDir/mlib")
		ftree.visit {element ->
			if (element.file.toString() ==~ /.+\.jmod$/) {
				ant.move(todir: "$projectDir/mlib") {
            		fileset(file: element.file.toString())
				}
			}
		}
	}
}

compileJava {

	doFirst {
		options.fork = true
		options.forkOptions.executable = SYS_HOME + '/java/' + JDK_VER + '/jdk/bin/javac'
		options.sourcepath = files("$projectDir/src/main/java")
		options.compilerArgs = [
			'-source', JDK_VER,
			'-target', JDK_VER,
			'-encoding', 'UTF8',
			'--module-path', "$projectDir/lib",
		]
		classpath = files()
	}
}

task createModJar(type:Exec) {

	dependsOn 'compileJava'
	doFirst {
		commandLine ((SYS_HOME + '/java/' + JDK_VER +'/jdk/bin/jar'),
					'--create',
					'--file', "$projectDir/$appDirName/${moduleName}.jar",
					'--main-class', "$mainClass",
					'--module-version', '1.0',
					'-C', "$projectDir/build/classes/java/main", '.')
	}
}

task runApp(type: JavaExec) {

	dependsOn 'createModJar'
	doFirst {
		executable = SYS_HOME + '/java/' + JDK_VER + '/jdk/bin/java'
		main = ''
		jvmArgs = [
			'--module-path', ("$projectDir/lib" + ps + "$projectDir/$appDirName"),
			'--module', "$moduleName/$mainClass",
		]
		classpath = files()
	}
}

task jlink() {

	dependsOn 'createModJar'
	doFirst {

		def requiredModNames = new ByteArrayOutputStream()
		exec {
			commandLine ((SYS_HOME + '/java/' + JDK_VER + '/jdk/bin/jdeps'),
						'--print-module-deps', 
						'--module-path', ("$projectDir/lib" + ps + "$projectDir/$appDirName"),
						'--add-modules', "$moduleName,$bhProgramExecModName")
						
			standardOutput = requiredModNames
		}
		
		exec {
			delete "$projectDir/$projName"
			commandLine ((SYS_HOME + '/java/' + JDK_VER + '/jdk/bin/jlink'),
						'--module-path', (SYS_HOME + '/java/' +  JDK_VER + '/jdk/jmods'),
						'--module-path', "$projectDir/mlib",
						'--add-modules', requiredModNames.toString().trim(),
						'--output', "$projectDir/$projName")
			
		}
	}
	
	doLast {
		ant.mkdir(dir:"$projectDir/$projName/$appDirName")
		ant.copy(todir: "$projectDir/$projName/$appDirName") {
			fileset(dir: "$projectDir/$appDirName")
		}
	}
}

task runSelfContained(type:Exec) {
	doFirst {
		commandLine ("$projectDir/$projName/bin/java", 
					 '-cp', ("$projectDir/$projName/lib" + ps + "$projectDir/$projName/$appDirName/${moduleName}.jar"), 
					 mainClass)
	}
}

